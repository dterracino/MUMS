// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace MUMS.Web.Controllers {
    public partial class RootController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public RootController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RootController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult AddRemoteUrl() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.AddRemoteUrl);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult AddTorrent() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.AddTorrent);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult UploadFiles() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.UploadFiles);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult StartTorrent() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.StartTorrent);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult StopTorrent() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.StopTorrent);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult RemoveTorrent() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.RemoveTorrent);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult RemoveTorrentAndData() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.RemoveTorrentAndData);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult TorrentAction() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.TorrentAction);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult SetLabel() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.SetLabel);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult GetTorrent() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.GetTorrent);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult JsonContract() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.JsonContract);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public RootController Actions { get { return MVC.Root; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Root";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Root";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = "Index";
            public readonly string GetEpisodes = "GetEpisodes";
            public readonly string GetTorrents = "GetTorrents";
            public readonly string AddRemoteUrl = "AddRemoteUrl";
            public readonly string AddTorrent = "AddTorrent";
            public readonly string UploadFiles = "UploadFiles";
            public readonly string StartTorrent = "StartTorrent";
            public readonly string StopTorrent = "StopTorrent";
            public readonly string RemoveTorrent = "RemoveTorrent";
            public readonly string RemoveTorrentAndData = "RemoveTorrentAndData";
            public readonly string TorrentAction = "TorrentAction";
            public readonly string SetLabel = "SetLabel";
            public readonly string GetTorrent = "GetTorrent";
            public readonly string ClearFinished = "ClearFinished";
            public readonly string JsonContract = "JsonContract";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants {
            public const string Index = "Index";
            public const string GetEpisodes = "GetEpisodes";
            public const string GetTorrents = "GetTorrents";
            public const string AddRemoteUrl = "AddRemoteUrl";
            public const string AddTorrent = "AddTorrent";
            public const string UploadFiles = "UploadFiles";
            public const string StartTorrent = "StartTorrent";
            public const string StopTorrent = "StopTorrent";
            public const string RemoveTorrent = "RemoveTorrent";
            public const string RemoveTorrentAndData = "RemoveTorrentAndData";
            public const string TorrentAction = "TorrentAction";
            public const string SetLabel = "SetLabel";
            public const string GetTorrent = "GetTorrent";
            public const string ClearFinished = "ClearFinished";
            public const string JsonContract = "JsonContract";
        }


        static readonly ActionParamsClass_AddRemoteUrl s_params_AddRemoteUrl = new ActionParamsClass_AddRemoteUrl();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddRemoteUrl AddRemoteUrlParams { get { return s_params_AddRemoteUrl; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddRemoteUrl {
            public readonly string url = "url";
            public readonly string label = "label";
            public readonly string hash = "hash";
        }
        static readonly ActionParamsClass_AddTorrent s_params_AddTorrent = new ActionParamsClass_AddTorrent();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddTorrent AddTorrentParams { get { return s_params_AddTorrent; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddTorrent {
            public readonly string url = "url";
            public readonly string label = "label";
            public readonly string hash = "hash";
        }
        static readonly ActionParamsClass_UploadFiles s_params_UploadFiles = new ActionParamsClass_UploadFiles();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UploadFiles UploadFilesParams { get { return s_params_UploadFiles; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UploadFiles {
            public readonly string label = "label";
        }
        static readonly ActionParamsClass_StartTorrent s_params_StartTorrent = new ActionParamsClass_StartTorrent();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_StartTorrent StartTorrentParams { get { return s_params_StartTorrent; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_StartTorrent {
            public readonly string hash = "hash";
        }
        static readonly ActionParamsClass_StopTorrent s_params_StopTorrent = new ActionParamsClass_StopTorrent();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_StopTorrent StopTorrentParams { get { return s_params_StopTorrent; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_StopTorrent {
            public readonly string hash = "hash";
        }
        static readonly ActionParamsClass_RemoveTorrent s_params_RemoveTorrent = new ActionParamsClass_RemoveTorrent();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RemoveTorrent RemoveTorrentParams { get { return s_params_RemoveTorrent; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RemoveTorrent {
            public readonly string hash = "hash";
        }
        static readonly ActionParamsClass_RemoveTorrentAndData s_params_RemoveTorrentAndData = new ActionParamsClass_RemoveTorrentAndData();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RemoveTorrentAndData RemoveTorrentAndDataParams { get { return s_params_RemoveTorrentAndData; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RemoveTorrentAndData {
            public readonly string hash = "hash";
        }
        static readonly ActionParamsClass_TorrentAction s_params_TorrentAction = new ActionParamsClass_TorrentAction();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_TorrentAction TorrentActionParams { get { return s_params_TorrentAction; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_TorrentAction {
            public readonly string hash = "hash";
            public readonly string action = "action";
        }
        static readonly ActionParamsClass_SetLabel s_params_SetLabel = new ActionParamsClass_SetLabel();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SetLabel SetLabelParams { get { return s_params_SetLabel; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SetLabel {
            public readonly string newLabel = "newLabel";
            public readonly string hash = "hash";
        }
        static readonly ActionParamsClass_GetTorrent s_params_GetTorrent = new ActionParamsClass_GetTorrent();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetTorrent GetTorrentParams { get { return s_params_GetTorrent; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetTorrent {
            public readonly string hash = "hash";
        }
        static readonly ActionParamsClass_JsonContract s_params_JsonContract = new ActionParamsClass_JsonContract();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_JsonContract JsonContractParams { get { return s_params_JsonContract; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_JsonContract {
            public readonly string obj = "obj";
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string Index = "~/Views/Root/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_RootController: MUMS.Web.Controllers.RootController {
        public T4MVC_RootController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult GetEpisodes() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.GetEpisodes);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult GetTorrents() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.GetTorrents);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult AddRemoteUrl(string url, string label, string hash) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.AddRemoteUrl);
            callInfo.RouteValueDictionary.Add("url", url);
            callInfo.RouteValueDictionary.Add("label", label);
            callInfo.RouteValueDictionary.Add("hash", hash);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult AddTorrent(string url, string label, string hash) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.AddTorrent);
            callInfo.RouteValueDictionary.Add("url", url);
            callInfo.RouteValueDictionary.Add("label", label);
            callInfo.RouteValueDictionary.Add("hash", hash);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult UploadFiles(string label) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.UploadFiles);
            callInfo.RouteValueDictionary.Add("label", label);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult StartTorrent(string hash) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.StartTorrent);
            callInfo.RouteValueDictionary.Add("hash", hash);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult StopTorrent(string hash) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.StopTorrent);
            callInfo.RouteValueDictionary.Add("hash", hash);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult RemoveTorrent(string hash) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.RemoveTorrent);
            callInfo.RouteValueDictionary.Add("hash", hash);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult RemoveTorrentAndData(string hash) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.RemoveTorrentAndData);
            callInfo.RouteValueDictionary.Add("hash", hash);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult TorrentAction(string hash, System.Action<string> action) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.TorrentAction);
            callInfo.RouteValueDictionary.Add("hash", hash);
            callInfo.RouteValueDictionary.Add("action", action);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult SetLabel(string newLabel, string hash) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.SetLabel);
            callInfo.RouteValueDictionary.Add("newLabel", newLabel);
            callInfo.RouteValueDictionary.Add("hash", hash);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult GetTorrent(string hash) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.GetTorrent);
            callInfo.RouteValueDictionary.Add("hash", hash);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult ClearFinished() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.ClearFinished);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult JsonContract(object obj) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.JsonContract);
            callInfo.RouteValueDictionary.Add("obj", obj);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591
